Tapalot
-------

ruby app to help bands play cover songs

USAGE:

ruby lib/main.rb iris.txt

  where "iris.txt" is a file containing the song structure.


Format for textfile:

1. begins and ends with hashes (i.e. ####)
e.g.
####
<song structure goes here>
####

2. specify a list of instruments included in the song at the top
e.g.
instruments:
g: guitar
d: drum
k: keys
b: bass

3. specify the time signature and tempo(in bpm) between square bracket
e.g.
[4/4 180]

4. specify several song sections (i.e. verse/chorus/bridge) with transition and repetitions
e.g.
+k +v
Verse 1 8x
-g
Chorus 16x

--> this means keys(k) & vocal(v) enter at Verse 1, which runs 8 measures,
--> then guitar doesn't play for the duration of Chorus, which runs 16 measures.




For a better example, look at iris.txt













===========================

To do / To think about:
. Conductor 'initialize' function knows about Song structure,
is this necessary? There is a bit too much coupling

. Metronomes are instantiated for every Song Section,
not intuitive to create a new 'counter' object for different section
is it possible to stop / reset / re-assign parameters to existing metronome ?

. Test sucks, is it an indication of bad design ?
in some cases, heavy mocking, also in other cases not DRY

. Conductor.run function is too big
tried to do too many things ?

. Conductor coupled tightly with Console ?








want to do:
x parse input file (bpm, change in unit of measure, pauses, instruments)
x run metronome
x play and show song structure.
. easy keyboard control to repeat, stop, change bpm
. hook with mp3 and try to play the specific section of song
. want decimal number for number of measures
. want way to define when an instrument enters
. only show song structure that will be played ?
. Show measure count alongside verse ?



sample:


####
instruments:
g1: lead guitar
g2: guitar 2
b: bass
v: vocal
k: keys
d: drums

[4/4 160]

+k
intro 4x

+v
verse1, drum enter   8x

+d +g1 +g2
chorus 8x


[6/8 160]

!v !g1 <-- not yet implemented
bridge 16x
####



